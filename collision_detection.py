import matplotlib.pyplot as plt
import numpy as np
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan


class CollisionDetector(Node):

    def __init__(self):
        super().__init__("collision_detection")
        self.sub_scan1 = self.create_subscription(
            LaserScan, '/scan1', self.scan_sub, 10)
        self.sub_scan2 = self.create_subscription(
            LaserScan, '/scan2', self.scan_sub, 10)
        self.sub_scan3 = self.create_subscription(
            LaserScan, '/scan3', self.scan_sub, 10)

        self.fig = plt.figure(figsize=(9, 3))
        self.axes = []
        for i in range(3):
            self.axes.append(self.fig.add_subplot(1, 3, i + 1))
        inf = 30
        self.baseline = np.array(
            [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 26.07250213623047, 21.59333610534668, 18.3723201751709, 16.145925521850586, 14.301115036010742, 12.780890464782715, 11.597492218017578, 10.652400970458984, 9.845233917236328, 9.126192092895508, 8.517464637756348, 7.9297566413879395, 7.472724914550781, 7.090708255767822, 6.707581043243408, 6.41542387008667, 6.071509838104248, 5.766900062561035, 5.601102828979492, 5.304281711578369, 5.111202716827393, 4.912177085876465, 4.733662128448486, 4.509704113006592, 4.470027446746826, 4.240005016326904, 4.139904975891113, 4.036282539367676, 3.9105563163757324, 3.815681219100952, 3.675149917602539, 3.5897371768951416, 3.504603147506714, 3.4158546924591064, 3.397188663482666, 3.2511537075042725, 3.1812684535980225, 3.094524383544922, 3.039036750793457, 3.023341417312622, 2.8526670932769775, 2.8484740257263184, 2.8238043785095215, 2.7186875343322754, 2.679191827774048, 2.607947587966919, 2.6247732639312744, 2.4924046993255615, 2.54399037361145, 2.4675049781799316, 2.403895854949951, 2.4104223251342773, 2.3176937103271484, 2.321899890899658, 2.328017234802246, 2.2186734676361084, 2.224935531616211, 2.18801212310791, 2.178407907485962, 2.1335268020629883, 2.125716209411621, 2.1125526428222656, 2.0230038166046143, 2.0314853191375732, 2.0455713272094727, 1.991714596748352, 1.958861231803894, 1.9437602758407593, 1.9479799270629883, 1.8737430572509766, 1.7959485054016113, 1.8191502094268799, 1.856315016746521, 1.8392735719680786, 1.7501511573791504, 1.7915358543395996, 1.7246732711791992, 1.786523699760437, 1.721225619316101, 1.7239797115325928, 1.7081364393234253, 1.7031316757202148, 1.6789238452911377, 1.7016205787658691, 1.6837406158447266, 1.6650443077087402, 1.5983325242996216, 1.7017039060592651, 1.608243465423584, 1.6350950002670288, 1.5944551229476929, 1.616727352142334, 1.602484107017517, 1.5760986804962158, 1.5797594785690308, 1.4777942895889282, 1.5713309049606323, 1.536478877067566, 1.5350816249847412, 1.5376415252685547, 1.511914849281311, 1.5046679973602295, 1.5479633808135986, 1.4980427026748657, 1.4891438484191895, 1.4951250553131104, 1.4768751859664917, 1.4739489555358887, 1.460228443145752, 1.4838471412658691, 1.5052664279937744, 1.480618953704834, 1.428678035736084, 1.4978199005126953, 1.445232629776001, 1.4686307907104492, 1.3924051523208618, 1.468438982963562, 1.4788017272949219, 1.440475583076477, 1.4714055061340332, 1.402256965637207, 1.4086195230484009, 1.4081863164901733, 1.361009120941162, 1.417847990989685, 1.4521757364273071, 1.4111775159835815, 1.4089937210083008, 1.3929643630981445, 1.4281691312789917, 1.4154726266860962, 1.444930076599121, 1.4134814739227295,
                1.4061223268508911, 1.438579797744751, 1.4358813762664795, 1.3960013389587402, 1.4098337888717651, 1.4494743347167969, 1.4246619939804077, 1.4133338928222656, 1.3954987525939941, 1.459834098815918, 1.4442471265792847, 1.4551256895065308, 1.455035924911499, 1.4406582117080688, 1.462830901145935, 1.4620798826217651, 1.4621962308883667, 1.396881103515625, 1.4919391870498657, 1.4474910497665405, 1.4453336000442505, 1.4108822345733643, 1.4801753759384155, 1.4255834817886353, 1.5027744770050049, 1.5071361064910889, 1.4586039781570435, 1.5166932344436646, 1.5549243688583374, 1.4195289611816406, 1.5293736457824707, 1.5207304954528809, 1.4839954376220703, 1.5252890586853027, 1.5318578481674194, 1.5349712371826172, 1.5617557764053345, 1.5504080057144165, 1.5557612180709839, 1.5279122591018677, 1.560791254043579, 1.5912827253341675, 1.6388912200927734, 1.6009795665740967, 1.5757112503051758, 1.6050043106079102, 1.626824975013733, 1.6699031591415405, 1.6622000932693481, 1.699586272239685, 1.7604092359542847, 1.6447299718856812, 1.753617286682129, 1.7316843271255493, 1.744943618774414, 1.7408368587493896, 1.7494189739227295, 1.7521578073501587, 1.7979300022125244, 1.7817933559417725, 1.7979648113250732, 1.8668683767318726, 1.839526891708374, 1.890725016593933, 1.8660870790481567, 1.8928236961364746, 1.958231806755066, 1.9750151634216309, 2.0319459438323975, 2.04791522026062, 2.037224292755127, 2.009040594100952, 2.1440351009368896, 2.135775566101074, 2.112766742706299, 2.1545166969299316, 2.1810243129730225, 2.2715208530426025, 2.2643420696258545, 2.30840802192688, 2.263388156890869, 2.396467685699463, 2.4504570960998535, 2.3997607231140137, 2.4728806018829346, 2.4901440143585205, 2.5858564376831055, 2.614279270172119, 2.712343692779541, 2.7064340114593506, 2.724454164505005, 2.813297986984253, 2.843163251876831, 2.899285078048706, 3.010272264480591, 3.004906177520752, 3.082360029220581, 3.136974573135376, 3.2420458793640137, 3.246730327606201, 3.355506181716919, 3.456543207168579, 3.5656790733337402, 3.6523475646972656, 3.791990280151367, 3.877995014190674, 4.010583877563477, 4.1153059005737305, 4.2755513191223145, 4.380493640899658, 4.569385528564453, 4.7282538414001465, 4.923462390899658, 5.057805061340332, 5.35453462600708, 5.55193567276001, 5.785546779632568, 6.0689616203308105, 6.312087535858154, 6.593635082244873, 7.02139139175415, 7.440415382385254, 7.956783771514893, 8.461806297302246, 9.080781936645508, 9.707230567932129, 10.527800559997559, 11.467921257019043, 12.69898509979248, 14.069172859191895, 15.855527877807617, 18.164350509643555, 21.256874084472656, 25.631717681884766, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf]
        )

    def scan_sub(self, oscan):
        print(oscan.header)
        label = oscan.header.frame_id
        scan_id = int(label[5]) - 1
        diff = self.baseline - np.array(oscan.ranges)
        self.axes[scan_id].cla()
        self.axes[scan_id].set_title(label)
        self.axes[scan_id].set_xlim([-0.7, 0.7])
        self.axes[scan_id].set_xlabel("angle[pi]")
        self.axes[0].set_ylabel("change rate")
        self.axes[scan_id].set_ylim([0, 1])
        self.axes[scan_id].plot(
            np.arange(-0.7, 0.7, 1.4 / 416), diff / self.baseline)
        plt.pause(0.1)
        print("max val:", np.max(diff))


def main(args=None):

    rclpy.init(args=args)
    node = CollisionDetector()

    try:
        rclpy.spin(node)

    finally:
        if node not in locals():
            node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
